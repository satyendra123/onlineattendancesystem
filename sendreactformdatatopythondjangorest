# isme humne ek react js me form banaya hai aur us form ke data to send krte hai jo ki python django receive krta hai us form ke data ko
#Step-1 settings.py
"""
Django settings for biometricbackened project.

Generated by 'django-admin startproject' using Django 5.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-vfddo5f=6%ny9maf4l%on^_&z=sd+&@%(bz9m#&-rfzzn#va1)'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['192.168.1.9']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'attendance',
    'corsheaders',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'biometricbackened.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'biometricbackened.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_ALL_HEADERS=True

CORS_ALLOWED_ORIGINS = [
    "http://192.168.1.9:3000",
    "http://192.168.1.9:3000",  # Add any additional origins if needed
    "http://localhost:3000",  # Add your frontend URL here
]

#step-2 views.py
# views.py
from rest_framework.decorators import api_view
from rest_framework.response import Response
from rest_framework import status
from .serializers import MyDataSerializer

@api_view(['POST'])
def MyDataView(request):
    if request.method == 'POST':
        serializer = MyDataSerializer(data=request.data)
        if serializer.is_valid():
            # Print the received data
            print("Received data:", serializer.validated_data)
            # Process the data here (if needed)
            return Response(serializer.data, status=status.HTTP_201_CREATED)
        print("Errors:", serializer.errors)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

#step-3 urls.py
from django.urls import path
from .views import MyDataView

urlpatterns = [
    path('api/data/', MyDataView, name='my_data'),
]

#step-4 main urls.py
from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('attendance.urls')),
]

#step-5 serializers.py
from rest_framework import serializers

class MyDataSerializer(serializers.Serializer):
    field1 = serializers.CharField(max_length=100)
    field2 = serializers.IntegerField()
    # Add more fields as needed

#step-6 models.py
from django.db import models

# Create your models here.
from django.db import models

class AttendanceLog(models.Model):
    finger_id = models.IntegerField()
    action = models.CharField(max_length=10)  # 'login' or 'logout'
    timestamp = models.DateTimeField(auto_now_add=True)
    user_name = models.CharField(max_length=100, blank=True, null=True)

    def __str__(self):
        return f"{self.finger_id} - {self.action} at {self.timestamp}"

# react js code attendance.js file

import React, { useState } from 'react';
import axios from 'axios';

const FingerprintManager = () => {
    const [field1, setField1] = useState('');
    const [field2, setField2] = useState(0);

    const handleSubmit = (e) => {
        e.preventDefault();
        
        const data = {
            field1: field1,
            field2: field2,
        };

        axios.post('http://192.168.1.9:8000/api/data/', data)
            .then(response => {
                console.log('Data sent successfully:', response.data);
            })
            .catch(error => {
                console.error('There was an error sending the data!', error);
            });
    };

    return (
        <form onSubmit={handleSubmit}>
            <input
                type="text"
                value={field1}
                onChange={(e) => setField1(e.target.value)}
                placeholder="Field 1"
            />
            <input
                type="number"
                value={field2}
                onChange={(e) => setField2(parseInt(e.target.value))}
                placeholder="Field 2"
            />
            <button type="submit">Submit</button>
        </form>
    );
};

export default FingerprintManager;
